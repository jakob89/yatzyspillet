using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Yatzy
{
   public class Baeger
    { 
        public Terning Terning1 = new Terning();
        public Terning Terning2 = new Terning();
        public Terning Terning3 = new Terning();
        public Terning Terning4 = new Terning();
        public Terning Terning5 = new Terning();

        public void RystBaeger()
        {
            Terning1.KastTerning();
            Terning2.KastTerning();
            Terning3.KastTerning();
            Terning4.KastTerning();
            Terning5.KastTerning();
        }


        public int HvorMangeAfEnSlags(int Slags)
        {
            int Antal = 0;
            if (Terning1.Øjne == Slags)
            { Antal = Antal + 1; }
            if (Terning2.Øjne == Slags)
            { Antal = Antal + 1; }
            if (Terning3.Øjne == Slags)
            { Antal = Antal + 1; }
            if (Terning4.Øjne == Slags)
            { Antal = Antal + 1; }
            if (Terning5.Øjne == Slags)
            { Antal = Antal + 1; }
            return Antal;
        }


        public int PointEttere()
        {
            return HvorMangeAfEnSlags(1);
        }

        public int PointToere()
        {
            return HvorMangeAfEnSlags(2) * 2;
        }

        public int PointTreere()
        {
            return HvorMangeAfEnSlags(3) * 3;
        }

        public int PointFirere()
        {
            return HvorMangeAfEnSlags(4) * 4;
        }

        public int PointFemmere()
        {
            return HvorMangeAfEnSlags(5) * 5;
        }

        public int PointSeksere()
        {
            return HvorMangeAfEnSlags(6) * 6;
        }

        // INDSÆT SIMPELSUM
        // INDSÆT BONUS


        public int PointEtPar()
        {
            int i;  //i'et repræsenterer antal øjne på terningen
            for (i = 6; i >= 1; i--) // vi starter ved seks for at finde det største par
            {
                if (HvorMangeAfEnSlags(i) > 1); 
                    return i * 2;   
            }
            return 0;
        }

        public int PointToPar()
        {
            int FoerstePar = 0;
            int AndetPar = 0;

            for (int i = 6; i >= 1; --i)
            {
                if (HvorMangeAfEnSlags(i) > 1)
                {
                    if (FoerstePar == 0)
                    {
                        FoerstePar = i * 2;
                    }
                    else
                    {
                        AndetPar = HvorMangeAfEnSlags(i) * 2;
                        return FoerstePar + AndetPar;
                    }
                }
            }
            return 0;
        }

        public int PointTreEns()
        {
            int i;  //i'et repræsenterer antal øjne på terningen
            for (i = 6; i >= 1; i--)
            { 
            if (HvorMangeAfEnSlags(i) > 2)
                return i * 3;
            } 
             return 0;
        }

        public int PointFireEns()
        {
            int i;  //i'et repræsenterer antal øjne på terningen
            for (i = 6; i >= 1; i--) // forloop starter med at tjekke på 6'ere (indikeret af i=6) og derefter 5,4,3,2,1 (indikeret af ;>=1). For hvert trin går i én ned (indikeret er i--)
            {
                if (HvorMangeAfEnSlags(i) > 3) // her tester vi, om flere terninger med samme antal øjne (i) er over 3 - altså fire ens.
                    return i * 4; //hvis det er tilfældet ganges antallet af øjne på den slags (i) med 4 for fire ens.
            }
            return 0; //ellers returneres intet.
        }

        public int PointFuldHus()
        {
            int i; //i repræsenterer antal øjne på terningen
            int treAfEnSlags = 0;
            int toAfEnSlags = 0;

            for (i = 6; i >= 1; i--)
            {
                if (HvorMangeAfEnSlags(i) == 3)
                {
                    treAfEnSlags = i * 3;

                    if (toAfEnSlags != 0)
                        return toAfEnSlags + treAfEnSlags;
                }
                else if (HvorMangeAfEnSlags(i) == 2)
                {
                    toAfEnSlags = i * 2;

                    if (treAfEnSlags != 0)
                        return toAfEnSlags + treAfEnSlags;
                }
            }
            return 0;
        }

        public int PointLilleTrappe()   
        {
            if (HvorMangeAfEnSlags(1) == 1 && HvorMangeAfEnSlags(2) == 1 && HvorMangeAfEnSlags(3) == 1 && HvorMangeAfEnSlags(4) == 1 && HvorMangeAfEnSlags(5) == 1 && HvorMangeAfEnSlags(6) == 0)
                return 15;
            else return 0;
        }

        public int PointStorTrappe()
        {
            if (HvorMangeAfEnSlags(1) == 0 && HvorMangeAfEnSlags(2) == 1 && HvorMangeAfEnSlags(3) == 1 && HvorMangeAfEnSlags(4) == 1 && HvorMangeAfEnSlags(5) == 1 && HvorMangeAfEnSlags(6) == 1)
                return 20;
            else return 0;
        }


        public int PointChance()
        {
            int sum;
            sum = Terning1.Øjne + Terning2.Øjne + Terning3.Øjne + Terning4.Øjne + Terning5.Øjne;
            return sum;
           
        }

        public int PointYatzy()
        {
            int i;  
            for (i = 6; i >= 1; i--) 
            {
                if (HvorMangeAfEnSlags(i) > 4) 
                    return i * 5; 
            }
            return 0;
        }
          
    }
}

